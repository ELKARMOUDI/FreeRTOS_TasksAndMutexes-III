
FreeRTOS_TasksAndMutexes3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e0  080051e0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080051e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f8  20000060  08005248  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  08005248  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ce  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb5  00000000  00000000  0001b75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d99  00000000  00000000  0001f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ff1  00000000  00000000  00020529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d4b  00000000  00000000  0003851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096cce  00000000  00000000  0004b265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1f33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  000e1f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e6b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050c4 	.word	0x080050c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080050c4 	.word	0x080050c4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <main>:
void Thread2Func(void const * argument);
void Thread3Func(void const * argument);


int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b09e      	sub	sp, #120	@ 0x78
 8000544:	af00      	add	r7, sp, #0


  HAL_Init();
 8000546:	f000 fb71 	bl	8000c2c <HAL_Init>


  SystemClock_Config();
 800054a:	f000 f871 	bl	8000630 <SystemClock_Config>


  MX_GPIO_Init();
 800054e:	f000 f903 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f8d7 	bl	8000704 <MX_USART2_UART_Init>


  osMutexDef(uart_mutex);
 8000556:	2300      	movs	r3, #0
 8000558:	673b      	str	r3, [r7, #112]	@ 0x70
 800055a:	2300      	movs	r3, #0
 800055c:	677b      	str	r3, [r7, #116]	@ 0x74
  uart_mutexHandle = osMutexCreate(osMutex(uart_mutex));
 800055e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f9ff 	bl	8002966 <osMutexCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a28      	ldr	r2, [pc, #160]	@ (800060c <main+0xcc>)
 800056c:	6013      	str	r3, [r2, #0]



  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <main+0xd0>)
 8000570:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000582:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f002 f98c 	bl	80028a6 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <main+0xd4>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread1 */
  osThreadDef(Thread1, Thread1Func, osPriorityNormal, 0, 128);
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <main+0xd8>)
 8000596:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 80005a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f979 	bl	80028a6 <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a19      	ldr	r2, [pc, #100]	@ (800061c <main+0xdc>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread2 */
  osThreadDef(Thread2, Thread2Func, osPriorityNormal, 0, 128);
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <main+0xe0>)
 80005bc:	f107 041c 	add.w	r4, r7, #28
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread2Handle = osThreadCreate(osThread(Thread2), NULL);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f966 	bl	80028a6 <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <main+0xe4>)
 80005de:	6013      	str	r3, [r2, #0]

  /* definition and creation of Thread3 */
   osThreadDef(Thread3, Thread3Func, osPriorityNormal, 0, 128);
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <main+0xe8>)
 80005e2:	463c      	mov	r4, r7
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   Thread3Handle = osThreadCreate(osThread(Thread3), NULL);
 80005f2:	463b      	mov	r3, r7
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f955 	bl	80028a6 <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <main+0xec>)
 8000600:	6013      	str	r3, [r2, #0]


  /* Start scheduler */
  osKernelStart();
 8000602:	f002 f949 	bl	8002898 <osKernelStart>

  while (1)
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0xc6>
 800060a:	bf00      	nop
 800060c:	20000374 	.word	0x20000374
 8000610:	080050e8 	.word	0x080050e8
 8000614:	20000364 	.word	0x20000364
 8000618:	0800510c 	.word	0x0800510c
 800061c:	20000368 	.word	0x20000368
 8000620:	08005130 	.word	0x08005130
 8000624:	2000036c 	.word	0x2000036c
 8000628:	08005154 	.word	0x08005154
 800062c:	20000370 	.word	0x20000370

08000630 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	@ 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fc50 	bl	8004ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fd92 	bl	80011e0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c2:	f000 f95b 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fff4 	bl	80016d0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f945 	bl	800097c <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f001 fc88 	bl	8002050 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f919 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000031c 	.word	0x2000031c
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_GPIO_Init+0x98>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <MX_GPIO_Init+0x98>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_GPIO_Init+0x98>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x98>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <MX_GPIO_Init+0x98>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_GPIO_Init+0x98>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4812      	ldr	r0, [pc, #72]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 80007ac:	f000 fcfe 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_GPIO_Init+0xa0>)
 80007c6:	f000 fb55 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ca:	2320      	movs	r3, #32
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_GPIO_Init+0x9c>)
 80007e2:	f000 fb47 	bl	8000e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020800 	.word	0x40020800

080007fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  for(;;)
  {
    osDelay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f002 f89a 	bl	800293e <osDelay>
 800080a:	e7fb      	b.n	8000804 <StartDefaultTask+0x8>

0800080c <Thread1Func>:
}


/* USER CODE END Header_Thread1Func */
void Thread1Func(void const * argument)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint8_t message[24] = "Greetings from Thread1\r\n";
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <Thread1Func+0x50>)
 8000816:	f107 0408 	add.w	r4, r7, #8
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000824:	e884 0003 	stmia.w	r4, {r0, r1}
  for(;;)
  {
	  xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <Thread1Func+0x54>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fbf5 	bl	8003020 <xQueueSemaphoreTake>

	  HAL_UART_Transmit(&huart2,message,24,10);
 8000836:	f107 0108 	add.w	r1, r7, #8
 800083a:	230a      	movs	r3, #10
 800083c:	2218      	movs	r2, #24
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <Thread1Func+0x58>)
 8000840:	f001 fc56 	bl	80020f0 <HAL_UART_Transmit>

	  xSemaphoreGive(uart_mutexHandle);
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <Thread1Func+0x54>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	2300      	movs	r3, #0
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	f002 fae5 	bl	8002e1c <xQueueGenericSend>

      osDelay(10);
 8000852:	200a      	movs	r0, #10
 8000854:	f002 f873 	bl	800293e <osDelay>
	  xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 8000858:	bf00      	nop
 800085a:	e7e5      	b.n	8000828 <Thread1Func+0x1c>
 800085c:	08005170 	.word	0x08005170
 8000860:	20000374 	.word	0x20000374
 8000864:	2000031c 	.word	0x2000031c

08000868 <Thread2Func>:
}


/* USER CODE END Header_Thread2Func */
void Thread2Func(void const * argument)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint8_t message[24] = "Greetings from Thread2\r\n";
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <Thread2Func+0x6c>)
 8000872:	f107 0408 	add.w	r4, r7, #8
 8000876:	461d      	mov	r5, r3
 8000878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000880:	e884 0003 	stmia.w	r4, {r0, r1}
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)== GPIO_PIN_RESET){
 8000884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <Thread2Func+0x70>)
 800088a:	f000 fc77 	bl	800117c <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d11b      	bne.n	80008cc <Thread2Func+0x64>

	  xTaskNotify(Thread3Handle,0x01,eSetBits);
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <Thread2Func+0x74>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	2300      	movs	r3, #0
 800089a:	2201      	movs	r2, #1
 800089c:	2101      	movs	r1, #1
 800089e:	f003 fdf7 	bl	8004490 <xTaskGenericNotify>

	  xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <Thread2Func+0x78>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fbb8 	bl	8003020 <xQueueSemaphoreTake>

	  HAL_UART_Transmit(&huart2,message,24,10);
 80008b0:	f107 0108 	add.w	r1, r7, #8
 80008b4:	230a      	movs	r3, #10
 80008b6:	2218      	movs	r2, #24
 80008b8:	480a      	ldr	r0, [pc, #40]	@ (80008e4 <Thread2Func+0x7c>)
 80008ba:	f001 fc19 	bl	80020f0 <HAL_UART_Transmit>

	  xSemaphoreGive(uart_mutexHandle);
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <Thread2Func+0x78>)
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	f002 faa8 	bl	8002e1c <xQueueGenericSend>


	}

      osDelay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f002 f836 	bl	800293e <osDelay>
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)== GPIO_PIN_RESET){
 80008d2:	e7d7      	b.n	8000884 <Thread2Func+0x1c>
 80008d4:	08005188 	.word	0x08005188
 80008d8:	40020800 	.word	0x40020800
 80008dc:	20000370 	.word	0x20000370
 80008e0:	20000374 	.word	0x20000374
 80008e4:	2000031c 	.word	0x2000031c

080008e8 <Thread3Func>:
  /* USER CODE END Thread2Func */
}

/* USER CODE END Header_Thread3Func */
void Thread3Func(void const * argument)
{
 80008e8:	b5b0      	push	{r4, r5, r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint8_t message[24] = "Greetings from Thread3\r\n";
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <Thread3Func+0x64>)
 80008f2:	f107 0410 	add.w	r4, r7, #16
 80008f6:	461d      	mov	r5, r3
 80008f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000900:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t notifyValue;

  while(1){
	  //Thread_3_Profiler++;

	xTaskNotifyWait(pdFALSE,0xFF,&notifyValue,portMAX_DELAY);
 8000904:	f107 020c 	add.w	r2, r7, #12
 8000908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090c:	21ff      	movs	r1, #255	@ 0xff
 800090e:	2000      	movs	r0, #0
 8000910:	f003 fd5e 	bl	80043d0 <xTaskNotifyWait>

   if((notifyValue & 0x01) != 0x00){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f2      	beq.n	8000904 <Thread3Func+0x1c>

	  xSemaphoreTake(uart_mutexHandle,portMAX_DELAY);
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <Thread3Func+0x68>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fb7a 	bl	8003020 <xQueueSemaphoreTake>

	  HAL_UART_Transmit(&huart2,message,24,10);
 800092c:	f107 0110 	add.w	r1, r7, #16
 8000930:	230a      	movs	r3, #10
 8000932:	2218      	movs	r2, #24
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <Thread3Func+0x6c>)
 8000936:	f001 fbdb 	bl	80020f0 <HAL_UART_Transmit>

	  xSemaphoreGive(uart_mutexHandle);
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <Thread3Func+0x68>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	2300      	movs	r3, #0
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	f002 fa6a 	bl	8002e1c <xQueueGenericSend>
	xTaskNotifyWait(pdFALSE,0xFF,&notifyValue,portMAX_DELAY);
 8000948:	e7dc      	b.n	8000904 <Thread3Func+0x1c>
 800094a:	bf00      	nop
 800094c:	080051a0 	.word	0x080051a0
 8000950:	20000374 	.word	0x20000374
 8000954:	2000031c 	.word	0x2000031c

08000958 <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800096a:	f000 f981 	bl	8000c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40000400 	.word	0x40000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_MspInit+0x54>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <HAL_MspInit+0x54>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_MspInit+0x54>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <HAL_MspInit+0x54>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fa27 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	@ (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a56:	f000 fa0d 	bl	8000e74 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	@ 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <HAL_InitTick+0xe4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <HAL_InitTick+0xe4>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <HAL_InitTick+0xe4>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a9c:	f107 0210 	add.w	r2, r7, #16
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f832 	bl	8001b10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab6:	f001 f803 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8000aba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000abe:	f000 ffff 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aca:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <HAL_InitTick+0xe8>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	0c9b      	lsrs	r3, r3, #18
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <HAL_InitTick+0xec>)
 8000ad8:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <HAL_InitTick+0xf0>)
 8000ada:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <HAL_InitTick+0xec>)
 8000ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <HAL_InitTick+0xec>)
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_InitTick+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_InitTick+0xec>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_InitTick+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000afc:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <HAL_InitTick+0xec>)
 8000afe:	f001 f839 	bl	8001b74 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d11b      	bne.n	8000b48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000b10:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <HAL_InitTick+0xec>)
 8000b12:	f001 f889 	bl	8001c28 <HAL_TIM_Base_Start_IT>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d111      	bne.n	8000b48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b24:	201d      	movs	r0, #29
 8000b26:	f000 f997 	bl	8000e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d808      	bhi.n	8000b42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	201d      	movs	r0, #29
 8000b36:	f000 f973 	bl	8000e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_InitTick+0xf4>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e002      	b.n	8000b48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3738      	adds	r7, #56	@ 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	431bde83 	.word	0x431bde83
 8000b5c:	20000378 	.word	0x20000378
 8000b60:	40000400 	.word	0x40000400
 8000b64:	20000004 	.word	0x20000004

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <TIM3_IRQHandler+0x10>)
 8000ba6:	f001 f8a1 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000378 	.word	0x20000378

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 f975 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fc99 	bl	8000540 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c1c:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8000c20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c24:	20004258 	.word	0x20004258

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f8d8 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f7ff ff08 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe92 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200003c0 	.word	0x200003c0

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200003c0 	.word	0x200003c0

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	@ (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	@ 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff4c 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff61 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff54 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e159      	b.n	8001144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8148 	bne.w	800113e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d017      	beq.n	8000f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a2 	beq.w	800113e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b57      	ldr	r3, [pc, #348]	@ (800115c <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a56      	ldr	r2, [pc, #344]	@ (800115c <HAL_GPIO_Init+0x2e8>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b54      	ldr	r3, [pc, #336]	@ (800115c <HAL_GPIO_Init+0x2e8>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a52      	ldr	r2, [pc, #328]	@ (8001160 <HAL_GPIO_Init+0x2ec>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	@ (8001164 <HAL_GPIO_Init+0x2f0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x202>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a48      	ldr	r2, [pc, #288]	@ (8001168 <HAL_GPIO_Init+0x2f4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x1fe>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a47      	ldr	r2, [pc, #284]	@ (800116c <HAL_GPIO_Init+0x2f8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x1fa>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a46      	ldr	r2, [pc, #280]	@ (8001170 <HAL_GPIO_Init+0x2fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x1f6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a45      	ldr	r2, [pc, #276]	@ (8001174 <HAL_GPIO_Init+0x300>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x1f2>
 8001062:	2304      	movs	r3, #4
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001066:	2307      	movs	r3, #7
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	@ (8001160 <HAL_GPIO_Init+0x2ec>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b38      	ldr	r3, [pc, #224]	@ (8001178 <HAL_GPIO_Init+0x304>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001178 <HAL_GPIO_Init+0x304>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <HAL_GPIO_Init+0x304>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a24      	ldr	r2, [pc, #144]	@ (8001178 <HAL_GPIO_Init+0x304>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ea:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <HAL_GPIO_Init+0x304>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110e:	4a1a      	ldr	r2, [pc, #104]	@ (8001178 <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_GPIO_Init+0x304>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001138:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f aea2 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	619a      	str	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e267      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d075      	beq.n	80012ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011fe:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00c      	beq.n	8001224 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b85      	ldr	r3, [pc, #532]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001212:	2b08      	cmp	r3, #8
 8001214:	d112      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	4b82      	ldr	r3, [pc, #520]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001222:	d10b      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4b7e      	ldr	r3, [pc, #504]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e242      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x74>
 8001246:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a75      	ldr	r2, [pc, #468]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b70      	ldr	r3, [pc, #448]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6f      	ldr	r2, [pc, #444]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6c      	ldr	r2, [pc, #432]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001278:	4b69      	ldr	r3, [pc, #420]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a68      	ldr	r2, [pc, #416]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b66      	ldr	r3, [pc, #408]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a65      	ldr	r2, [pc, #404]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fcfe 	bl	8000c98 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fcfa 	bl	8000c98 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e207      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fcea 	bl	8000c98 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fce6 	bl	8000c98 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1f3      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1c7      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4937      	ldr	r1, [pc, #220]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_RCC_OscConfig+0x244>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fc9f 	bl	8000c98 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fc9b 	bl	8000c98 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1a8      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4925      	ldr	r1, [pc, #148]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_RCC_OscConfig+0x244>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fc7e 	bl	8000c98 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc7a 	bl	8000c98 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e187      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d036      	beq.n	8001438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_RCC_OscConfig+0x248>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fc5e 	bl	8000c98 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc5a 	bl	8000c98 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e167      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x200>
 80013fe:	e01b      	b.n	8001438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <HAL_RCC_OscConfig+0x248>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fc47 	bl	8000c98 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	e00e      	b.n	800142c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fc43 	bl	8000c98 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d907      	bls.n	800142c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e150      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001420:	40023800 	.word	0x40023800
 8001424:	42470000 	.word	0x42470000
 8001428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b88      	ldr	r3, [pc, #544]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ea      	bne.n	800140e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8097 	beq.w	8001574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b81      	ldr	r3, [pc, #516]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b7d      	ldr	r3, [pc, #500]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a7c      	ldr	r2, [pc, #496]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b7a      	ldr	r3, [pc, #488]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b77      	ldr	r3, [pc, #476]	@ (8001654 <HAL_RCC_OscConfig+0x474>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4b74      	ldr	r3, [pc, #464]	@ (8001654 <HAL_RCC_OscConfig+0x474>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	@ (8001654 <HAL_RCC_OscConfig+0x474>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fc03 	bl	8000c98 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fbff 	bl	8000c98 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e10c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <HAL_RCC_OscConfig+0x474>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x2ea>
 80014bc:	4b64      	ldr	r3, [pc, #400]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c0:	4a63      	ldr	r2, [pc, #396]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x30c>
 80014d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014de:	4b5c      	ldr	r3, [pc, #368]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ec:	4b58      	ldr	r3, [pc, #352]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f0:	4a57      	ldr	r2, [pc, #348]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f8:	4b55      	ldr	r3, [pc, #340]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fc:	4a54      	ldr	r2, [pc, #336]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d015      	beq.n	8001538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fbc4 	bl	8000c98 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fbc0 	bl	8000c98 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0cb      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ee      	beq.n	8001514 <HAL_RCC_OscConfig+0x334>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff fbae 	bl	8000c98 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fbaa 	bl	8000c98 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0b5      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ee      	bne.n	8001540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a38      	ldr	r2, [pc, #224]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a1 	beq.w	80016c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157e:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d05c      	beq.n	8001644 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d141      	bne.n	8001616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fb7e 	bl	8000c98 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fb7a 	bl	8000c98 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e087      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	491b      	ldr	r1, [pc, #108]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb53 	bl	8000c98 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f6:	f7ff fb4f 	bl	8000c98 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e05c      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x416>
 8001614:	e054      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fb3c 	bl	8000c98 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fb38 	bl	8000c98 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e045      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_RCC_OscConfig+0x470>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x444>
 8001642:	e03d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e038      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000
 8001658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_RCC_OscConfig+0x4ec>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d028      	beq.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d121      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d11a      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	4293      	cmp	r3, r2
 8001696:	d111      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	085b      	lsrs	r3, r3, #1
 80016a4:	3b01      	subs	r3, #1
 80016a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0cc      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b68      	ldr	r3, [pc, #416]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d90c      	bls.n	800170c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4b59      	ldr	r3, [pc, #356]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a58      	ldr	r2, [pc, #352]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4b53      	ldr	r3, [pc, #332]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a52      	ldr	r2, [pc, #328]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b50      	ldr	r3, [pc, #320]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	494d      	ldr	r1, [pc, #308]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d044      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e067      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4934      	ldr	r1, [pc, #208]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff fa6a 	bl	8000c98 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7ff fa66 	bl	8000c98 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4916      	ldr	r1, [pc, #88]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	490e      	ldr	r1, [pc, #56]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001856:	f000 f821 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	490a      	ldr	r1, [pc, #40]	@ (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f8fa 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00
 800188c:	40023800 	.word	0x40023800
 8001890:	080051c0 	.word	0x080051c0
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a0:	b094      	sub	sp, #80	@ 0x50
 80018a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4b79      	ldr	r3, [pc, #484]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d00d      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x40>
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	f200 80e1 	bhi.w	8001a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ce:	e0db      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d4:	e0db      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80018d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018da:	e0d8      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018dc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001904:	633b      	str	r3, [r7, #48]	@ 0x30
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	@ 0x34
 800190a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800190e:	4622      	mov	r2, r4
 8001910:	462b      	mov	r3, r5
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4621      	mov	r1, r4
 8001928:	1a51      	subs	r1, r2, r1
 800192a:	6139      	str	r1, [r7, #16]
 800192c:	4629      	mov	r1, r5
 800192e:	eb63 0301 	sbc.w	r3, r3, r1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001940:	4659      	mov	r1, fp
 8001942:	018b      	lsls	r3, r1, #6
 8001944:	4651      	mov	r1, sl
 8001946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194a:	4651      	mov	r1, sl
 800194c:	018a      	lsls	r2, r1, #6
 800194e:	4651      	mov	r1, sl
 8001950:	ebb2 0801 	subs.w	r8, r2, r1
 8001954:	4659      	mov	r1, fp
 8001956:	eb63 0901 	sbc.w	r9, r3, r1
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800196a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800196e:	4690      	mov	r8, r2
 8001970:	4699      	mov	r9, r3
 8001972:	4623      	mov	r3, r4
 8001974:	eb18 0303 	adds.w	r3, r8, r3
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	462b      	mov	r3, r5
 800197c:	eb49 0303 	adc.w	r3, r9, r3
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198e:	4629      	mov	r1, r5
 8001990:	024b      	lsls	r3, r1, #9
 8001992:	4621      	mov	r1, r4
 8001994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001998:	4621      	mov	r1, r4
 800199a:	024a      	lsls	r2, r1, #9
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a2:	2200      	movs	r2, #0
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019ac:	f7fe fc18 	bl	80001e0 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4613      	mov	r3, r2
 80019b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019b8:	e058      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	4611      	mov	r1, r2
 80019c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019ca:	623b      	str	r3, [r7, #32]
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d4:	4642      	mov	r2, r8
 80019d6:	464b      	mov	r3, r9
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0159      	lsls	r1, r3, #5
 80019e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e6:	0150      	lsls	r0, r2, #5
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4641      	mov	r1, r8
 80019ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f2:	4649      	mov	r1, r9
 80019f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a10:	eb63 050b 	sbc.w	r5, r3, fp
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	00eb      	lsls	r3, r5, #3
 8001a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a22:	00e2      	lsls	r2, r4, #3
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	4643      	mov	r3, r8
 8001a2a:	18e3      	adds	r3, r4, r3
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	464b      	mov	r3, r9
 8001a30:	eb45 0303 	adc.w	r3, r5, r3
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a42:	4629      	mov	r1, r5
 8001a44:	028b      	lsls	r3, r1, #10
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	028a      	lsls	r2, r1, #10
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a56:	2200      	movs	r2, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	61fa      	str	r2, [r7, #28]
 8001a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a60:	f7fe fbbe 	bl	80001e0 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3750      	adds	r7, #80	@ 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	00f42400 	.word	0x00f42400
 8001aa4:	007a1200 	.word	0x007a1200

08001aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	@ (8001ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	080051d0 	.word	0x080051d0

08001ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aec:	f7ff ffdc 	bl	8001aa8 <HAL_RCC_GetHCLKFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	4903      	ldr	r1, [pc, #12]	@ (8001b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	080051d0 	.word	0x080051d0

08001b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_RCC_GetClockConfig+0x5c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_RCC_GetClockConfig+0x5c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <HAL_RCC_GetClockConfig+0x60>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0207 	and.w	r2, r3, #7
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e041      	b.n	8001c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f839 	bl	8001c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f000 f9b2 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d001      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e044      	b.n	8001cca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x6c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6a:	d013      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xb4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x6c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x6c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x6c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ce8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d010      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	e007      	b.n	8001cc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	40014000 	.word	0x40014000

08001cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8d2 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8c4 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8d5 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ac 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89e 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8af 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0208 	mvn.w	r2, #8
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f886 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f878 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f889 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0210 	mvn.w	r2, #16
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f860 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f852 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f863 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0201 	mvn.w	r2, #1
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fd80 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8e0 	bl	800203c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f834 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8b2 	bl	8002028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a37      	ldr	r2, [pc, #220]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <TIM_Base_SetConfig+0xf4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <TIM_Base_SetConfig+0xf8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a32      	ldr	r2, [pc, #200]	@ (8002018 <TIM_Base_SetConfig+0xfc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a28      	ldr	r2, [pc, #160]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	@ (8002010 <TIM_Base_SetConfig+0xf4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <TIM_Base_SetConfig+0xf8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <TIM_Base_SetConfig+0xfc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <TIM_Base_SetConfig+0x100>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <TIM_Base_SetConfig+0x104>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <TIM_Base_SetConfig+0x108>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <TIM_Base_SetConfig+0xf0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d103      	bne.n	8001fe6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40010000 	.word	0x40010000
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e042      	b.n	80020e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fcb2 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	@ 0x24
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f973 	bl	8002380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	@ 0x28
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	d175      	bne.n	80021fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_UART_Transmit+0x2c>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e06e      	b.n	80021fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2221      	movs	r2, #33	@ 0x21
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212e:	f7fe fdb3 	bl	8000c98 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002148:	d108      	bne.n	800215c <HAL_UART_Transmit+0x6c>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e003      	b.n	8002164 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002164:	e02e      	b.n	80021c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f848 	bl	8002206 <UART_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03a      	b.n	80021fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800219c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3302      	adds	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e007      	b.n	80021b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cb      	bne.n	8002166 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2140      	movs	r1, #64	@ 0x40
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f814 	bl	8002206 <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e006      	b.n	80021fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002216:	e03b      	b.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800221e:	d037      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002220:	f7fe fd3a 	bl	8000c98 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d302      	bcc.n	8002236 <UART_WaitOnFlagUntilTimeout+0x30>
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e03a      	b.n	80022b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b80      	cmp	r3, #128	@ 0x80
 800224c:	d020      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b40      	cmp	r3, #64	@ 0x40
 8002252:	d01d      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b08      	cmp	r3, #8
 8002260:	d116      	bne.n	8002290 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f81d 	bl	80022b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2208      	movs	r2, #8
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e00f      	b.n	80022b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d0b4      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b095      	sub	sp, #84	@ 0x54
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ca:	e853 3f00 	ldrex	r3, [r3]
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022e8:	e841 2300 	strex	r3, r2, [r1]
 80022ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e5      	bne.n	80022c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3314      	adds	r3, #20
 80022fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	e853 3f00 	ldrex	r3, [r3]
 8002302:	61fb      	str	r3, [r7, #28]
   return(result);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3314      	adds	r3, #20
 8002312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800231a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e5      	bne.n	80022f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	2b01      	cmp	r3, #1
 800232e:	d119      	bne.n	8002364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	e853 3f00 	ldrex	r3, [r3]
 800233e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f023 0310 	bic.w	r3, r3, #16
 8002346:	647b      	str	r3, [r7, #68]	@ 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	330c      	adds	r3, #12
 800234e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002350:	61ba      	str	r2, [r7, #24]
 8002352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	613b      	str	r3, [r7, #16]
   return(result);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e5      	bne.n	8002330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002372:	bf00      	nop
 8002374:	3754      	adds	r7, #84	@ 0x54
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b0c0      	sub	sp, #256	@ 0x100
 8002386:	af00      	add	r7, sp, #0
 8002388:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	ea40 0301 	orr.w	r3, r0, r1
 80023a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	431a      	orrs	r2, r3
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023d8:	f021 010c 	bic.w	r1, r1, #12
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023e6:	430b      	orrs	r3, r1
 80023e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fa:	6999      	ldr	r1, [r3, #24]
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	ea40 0301 	orr.w	r3, r0, r1
 8002406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <UART_SetConfig+0x2cc>)
 8002410:	429a      	cmp	r2, r3
 8002412:	d005      	beq.n	8002420 <UART_SetConfig+0xa0>
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b8d      	ldr	r3, [pc, #564]	@ (8002650 <UART_SetConfig+0x2d0>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d104      	bne.n	800242a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002420:	f7ff fb62 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002424:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002428:	e003      	b.n	8002432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800242a:	f7ff fb49 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 800242e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800243c:	f040 810c 	bne.w	8002658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002444:	2200      	movs	r2, #0
 8002446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800244a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800244e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	1891      	adds	r1, r2, r2
 8002458:	65b9      	str	r1, [r7, #88]	@ 0x58
 800245a:	415b      	adcs	r3, r3
 800245c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800245e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002462:	4621      	mov	r1, r4
 8002464:	eb12 0801 	adds.w	r8, r2, r1
 8002468:	4629      	mov	r1, r5
 800246a:	eb43 0901 	adc.w	r9, r3, r1
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002482:	4690      	mov	r8, r2
 8002484:	4699      	mov	r9, r3
 8002486:	4623      	mov	r3, r4
 8002488:	eb18 0303 	adds.w	r3, r8, r3
 800248c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002490:	462b      	mov	r3, r5
 8002492:	eb49 0303 	adc.w	r3, r9, r3
 8002496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024ae:	460b      	mov	r3, r1
 80024b0:	18db      	adds	r3, r3, r3
 80024b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80024b4:	4613      	mov	r3, r2
 80024b6:	eb42 0303 	adc.w	r3, r2, r3
 80024ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80024bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024c4:	f7fd fe8c 	bl	80001e0 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <UART_SetConfig+0x2d4>)
 80024ce:	fba3 2302 	umull	r2, r3, r3, r2
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	011c      	lsls	r4, r3, #4
 80024d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024e8:	4642      	mov	r2, r8
 80024ea:	464b      	mov	r3, r9
 80024ec:	1891      	adds	r1, r2, r2
 80024ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024f0:	415b      	adcs	r3, r3
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024f8:	4641      	mov	r1, r8
 80024fa:	eb12 0a01 	adds.w	sl, r2, r1
 80024fe:	4649      	mov	r1, r9
 8002500:	eb43 0b01 	adc.w	fp, r3, r1
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002518:	4692      	mov	sl, r2
 800251a:	469b      	mov	fp, r3
 800251c:	4643      	mov	r3, r8
 800251e:	eb1a 0303 	adds.w	r3, sl, r3
 8002522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002526:	464b      	mov	r3, r9
 8002528:	eb4b 0303 	adc.w	r3, fp, r3
 800252c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800253c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002544:	460b      	mov	r3, r1
 8002546:	18db      	adds	r3, r3, r3
 8002548:	643b      	str	r3, [r7, #64]	@ 0x40
 800254a:	4613      	mov	r3, r2
 800254c:	eb42 0303 	adc.w	r3, r2, r3
 8002550:	647b      	str	r3, [r7, #68]	@ 0x44
 8002552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800255a:	f7fd fe41 	bl	80001e0 <__aeabi_uldivmod>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4611      	mov	r1, r2
 8002564:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <UART_SetConfig+0x2d4>)
 8002566:	fba3 2301 	umull	r2, r3, r3, r1
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2264      	movs	r2, #100	@ 0x64
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	1acb      	subs	r3, r1, r3
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800257a:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <UART_SetConfig+0x2d4>)
 800257c:	fba3 2302 	umull	r2, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002588:	441c      	add	r4, r3
 800258a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002594:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800259c:	4642      	mov	r2, r8
 800259e:	464b      	mov	r3, r9
 80025a0:	1891      	adds	r1, r2, r2
 80025a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025a4:	415b      	adcs	r3, r3
 80025a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025ac:	4641      	mov	r1, r8
 80025ae:	1851      	adds	r1, r2, r1
 80025b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80025b2:	4649      	mov	r1, r9
 80025b4:	414b      	adcs	r3, r1
 80025b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025c4:	4659      	mov	r1, fp
 80025c6:	00cb      	lsls	r3, r1, #3
 80025c8:	4651      	mov	r1, sl
 80025ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ce:	4651      	mov	r1, sl
 80025d0:	00ca      	lsls	r2, r1, #3
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	4642      	mov	r2, r8
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025e0:	464b      	mov	r3, r9
 80025e2:	460a      	mov	r2, r1
 80025e4:	eb42 0303 	adc.w	r3, r2, r3
 80025e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002600:	460b      	mov	r3, r1
 8002602:	18db      	adds	r3, r3, r3
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002606:	4613      	mov	r3, r2
 8002608:	eb42 0303 	adc.w	r3, r2, r3
 800260c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800260e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002616:	f7fd fde3 	bl	80001e0 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <UART_SetConfig+0x2d4>)
 8002620:	fba3 1302 	umull	r1, r3, r3, r2
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	2164      	movs	r1, #100	@ 0x64
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3332      	adds	r3, #50	@ 0x32
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <UART_SetConfig+0x2d4>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	f003 0207 	and.w	r2, r3, #7
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4422      	add	r2, r4
 8002646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002648:	e106      	b.n	8002858 <UART_SetConfig+0x4d8>
 800264a:	bf00      	nop
 800264c:	40011000 	.word	0x40011000
 8002650:	40011400 	.word	0x40011400
 8002654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800265c:	2200      	movs	r2, #0
 800265e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002662:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800266a:	4642      	mov	r2, r8
 800266c:	464b      	mov	r3, r9
 800266e:	1891      	adds	r1, r2, r2
 8002670:	6239      	str	r1, [r7, #32]
 8002672:	415b      	adcs	r3, r3
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
 8002676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267a:	4641      	mov	r1, r8
 800267c:	1854      	adds	r4, r2, r1
 800267e:	4649      	mov	r1, r9
 8002680:	eb43 0501 	adc.w	r5, r3, r1
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	00eb      	lsls	r3, r5, #3
 800268e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002692:	00e2      	lsls	r2, r4, #3
 8002694:	4614      	mov	r4, r2
 8002696:	461d      	mov	r5, r3
 8002698:	4643      	mov	r3, r8
 800269a:	18e3      	adds	r3, r4, r3
 800269c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026a0:	464b      	mov	r3, r9
 80026a2:	eb45 0303 	adc.w	r3, r5, r3
 80026a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026c6:	4629      	mov	r1, r5
 80026c8:	008b      	lsls	r3, r1, #2
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d0:	4621      	mov	r1, r4
 80026d2:	008a      	lsls	r2, r1, #2
 80026d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026d8:	f7fd fd82 	bl	80001e0 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4b60      	ldr	r3, [pc, #384]	@ (8002864 <UART_SetConfig+0x4e4>)
 80026e2:	fba3 2302 	umull	r2, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	011c      	lsls	r4, r3, #4
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	1891      	adds	r1, r2, r2
 8002702:	61b9      	str	r1, [r7, #24]
 8002704:	415b      	adcs	r3, r3
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800270c:	4641      	mov	r1, r8
 800270e:	1851      	adds	r1, r2, r1
 8002710:	6139      	str	r1, [r7, #16]
 8002712:	4649      	mov	r1, r9
 8002714:	414b      	adcs	r3, r1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002724:	4659      	mov	r1, fp
 8002726:	00cb      	lsls	r3, r1, #3
 8002728:	4651      	mov	r1, sl
 800272a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272e:	4651      	mov	r1, sl
 8002730:	00ca      	lsls	r2, r1, #3
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	4603      	mov	r3, r0
 8002738:	4642      	mov	r2, r8
 800273a:	189b      	adds	r3, r3, r2
 800273c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002740:	464b      	mov	r3, r9
 8002742:	460a      	mov	r2, r1
 8002744:	eb42 0303 	adc.w	r3, r2, r3
 8002748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002756:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002764:	4649      	mov	r1, r9
 8002766:	008b      	lsls	r3, r1, #2
 8002768:	4641      	mov	r1, r8
 800276a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800276e:	4641      	mov	r1, r8
 8002770:	008a      	lsls	r2, r1, #2
 8002772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002776:	f7fd fd33 	bl	80001e0 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4611      	mov	r1, r2
 8002780:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <UART_SetConfig+0x4e4>)
 8002782:	fba3 2301 	umull	r2, r3, r3, r1
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2264      	movs	r2, #100	@ 0x64
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	1acb      	subs	r3, r1, r3
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	@ 0x32
 8002794:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <UART_SetConfig+0x4e4>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a0:	441c      	add	r4, r3
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a6:	2200      	movs	r2, #0
 80027a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80027aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80027ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	415b      	adcs	r3, r3
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c0:	4641      	mov	r1, r8
 80027c2:	1851      	adds	r1, r2, r1
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	4649      	mov	r1, r9
 80027c8:	414b      	adcs	r3, r1
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027d8:	4659      	mov	r1, fp
 80027da:	00cb      	lsls	r3, r1, #3
 80027dc:	4651      	mov	r1, sl
 80027de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e2:	4651      	mov	r1, sl
 80027e4:	00ca      	lsls	r2, r1, #3
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	4642      	mov	r2, r8
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f2:	464b      	mov	r3, r9
 80027f4:	460a      	mov	r2, r1
 80027f6:	eb42 0303 	adc.w	r3, r2, r3
 80027fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	663b      	str	r3, [r7, #96]	@ 0x60
 8002806:	667a      	str	r2, [r7, #100]	@ 0x64
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002814:	4649      	mov	r1, r9
 8002816:	008b      	lsls	r3, r1, #2
 8002818:	4641      	mov	r1, r8
 800281a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281e:	4641      	mov	r1, r8
 8002820:	008a      	lsls	r2, r1, #2
 8002822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002826:	f7fd fcdb 	bl	80001e0 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <UART_SetConfig+0x4e4>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	@ 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	3332      	adds	r3, #50	@ 0x32
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <UART_SetConfig+0x4e4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4422      	add	r2, r4
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800285e:	46bd      	mov	sp, r7
 8002860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002864:	51eb851f 	.word	0x51eb851f

08002868 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287a:	2b84      	cmp	r3, #132	@ 0x84
 800287c:	d005      	beq.n	800288a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800287e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	3303      	adds	r3, #3
 8002888:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800289c:	f000 ffb8 	bl	8003810 <vTaskStartScheduler>
  
  return osOK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a8:	b089      	sub	sp, #36	@ 0x24
 80028aa:	af04      	add	r7, sp, #16
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <osThreadCreate+0x54>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01c      	beq.n	80028fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685c      	ldr	r4, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691e      	ldr	r6, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffc8 	bl	8002868 <makeFreeRtosPriority>
 80028d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028e2:	9202      	str	r2, [sp, #8]
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	9100      	str	r1, [sp, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4632      	mov	r2, r6
 80028ec:	4629      	mov	r1, r5
 80028ee:	4620      	mov	r0, r4
 80028f0:	f000 fda8 	bl	8003444 <xTaskCreateStatic>
 80028f4:	4603      	mov	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e01c      	b.n	8002934 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685c      	ldr	r4, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002906:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ffaa 	bl	8002868 <makeFreeRtosPriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	4632      	mov	r2, r6
 8002922:	4629      	mov	r1, r5
 8002924:	4620      	mov	r0, r4
 8002926:	f000 fded 	bl	8003504 <xTaskCreate>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800293e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <osDelay+0x16>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	e000      	b.n	8002956 <osDelay+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f000 ff24 	bl	80037a4 <vTaskDelay>
  
  return osOK;
 800295c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4619      	mov	r1, r3
 800297c:	2001      	movs	r0, #1
 800297e:	f000 fa32 	bl	8002de6 <xQueueCreateMutexStatic>
 8002982:	4603      	mov	r3, r0
 8002984:	e003      	b.n	800298e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002986:	2001      	movs	r0, #1
 8002988:	f000 fa15 	bl	8002db6 <xQueueCreateMutex>
 800298c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f103 0208 	add.w	r2, r3, #8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a4e:	d103      	bne.n	8002a58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e00c      	b.n	8002a72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e002      	b.n	8002a66 <vListInsert+0x2e>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d2f6      	bcs.n	8002a60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6852      	ldr	r2, [r2, #4]
 8002aca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b2c:	f001 ff0c 	bl	8004948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	441a      	add	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d114      	bne.n	8002bac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01a      	beq.n	8002bc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f898 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d012      	beq.n	8002bc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <xQueueGenericReset+0xd0>)
 8002b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	e009      	b.n	8002bc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fef0 	bl	8002996 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff feeb 	bl	8002996 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bc0:	f001 fef4 	bl	80049ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000ed04 	.word	0xe000ed04

08002bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	@ 0x38
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <xQueueGenericCreateStatic+0x56>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <xQueueGenericCreateStatic+0x5a>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <xQueueGenericCreateStatic+0x5c>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	623b      	str	r3, [r7, #32]
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <xQueueGenericCreateStatic+0x84>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <xQueueGenericCreateStatic+0x88>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xQueueGenericCreateStatic+0x8a>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	61fb      	str	r3, [r7, #28]
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	e7fd      	b.n	8002c76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7a:	2348      	movs	r3, #72	@ 0x48
 8002c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b48      	cmp	r3, #72	@ 0x48
 8002c82:	d00b      	beq.n	8002c9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f840 	bl	8002d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3730      	adds	r7, #48	@ 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	@ 0x28
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	613b      	str	r3, [r7, #16]
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	e7fd      	b.n	8002cf6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3348      	adds	r3, #72	@ 0x48
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 fefd 	bl	8004b08 <pvPortMalloc>
 8002d0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d011      	beq.n	8002d3a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3348      	adds	r3, #72	@ 0x48
 8002d1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f805 	bl	8002d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d72:	2101      	movs	r1, #1
 8002d74:	69b8      	ldr	r0, [r7, #24]
 8002d76:	f7ff fec3 	bl	8002b00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002da2:	2300      	movs	r3, #0
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f837 	bl	8002e1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6939      	ldr	r1, [r7, #16]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff7d 	bl	8002cce <xQueueGenericCreate>
 8002dd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff ffd3 	bl	8002d82 <prvInitialiseMutex>

		return xNewQueue;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b088      	sub	sp, #32
 8002dea:	af02      	add	r7, sp, #8
 8002dec:	4603      	mov	r3, r0
 8002dee:	6039      	str	r1, [r7, #0]
 8002df0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	6939      	ldr	r1, [r7, #16]
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f7ff fee5 	bl	8002bd4 <xQueueGenericCreateStatic>
 8002e0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ffb8 	bl	8002d82 <prvInitialiseMutex>

		return xNewQueue;
 8002e12:	68fb      	ldr	r3, [r7, #12]
	}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	@ 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <xQueueGenericSend+0x34>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSend+0x42>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSend+0x46>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSend+0x48>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <xQueueGenericSend+0x64>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x72>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericSend+0x76>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericSend+0x78>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <xQueueGenericSend+0x94>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	623b      	str	r3, [r7, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eb0:	f001 f8ce 	bl	8004050 <xTaskGetSchedulerState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <xQueueGenericSend+0xa4>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <xQueueGenericSend+0xa8>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <xQueueGenericSend+0xaa>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	61fb      	str	r3, [r7, #28]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ee2:	f001 fd31 	bl	8004948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <xQueueGenericSend+0xdc>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d129      	bne.n	8002f4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002efe:	f000 f9b7 	bl	8003270 <prvCopyDataToQueue>
 8002f02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	3324      	adds	r3, #36	@ 0x24
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fed7 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800301c <xQueueGenericSend+0x200>)
 8002f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	e00a      	b.n	8002f44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <xQueueGenericSend+0x200>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f44:	f001 fd32 	bl	80049ac <vPortExitCritical>
				return pdPASS;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e063      	b.n	8003014 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f52:	f001 fd2b 	bl	80049ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e05c      	b.n	8003014 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ff11 	bl	8003d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f6e:	f001 fd1d 	bl	80049ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f72:	f000 fcb7 	bl	80038e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f76:	f001 fce7 	bl	8004948 <vPortEnterCritical>
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f86:	d103      	bne.n	8002f90 <xQueueGenericSend+0x174>
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f9c:	d103      	bne.n	8002fa6 <xQueueGenericSend+0x18a>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fa6:	f001 fd01 	bl	80049ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002faa:	1d3a      	adds	r2, r7, #4
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 ff00 	bl	8003db8 <xTaskCheckForTimeOut>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d124      	bne.n	8003008 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fc0:	f000 fa28 	bl	8003414 <prvIsQueueFull>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d018      	beq.n	8002ffc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	3310      	adds	r3, #16
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fe50 	bl	8003c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fda:	f000 f9b3 	bl	8003344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fde:	f000 fc8f 	bl	8003900 <xTaskResumeAll>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f af7c 	bne.w	8002ee2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002fea:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <xQueueGenericSend+0x200>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	e772      	b.n	8002ee2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ffe:	f000 f9a1 	bl	8003344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003002:	f000 fc7d 	bl	8003900 <xTaskResumeAll>
 8003006:	e76c      	b.n	8002ee2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800300a:	f000 f99b 	bl	8003344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800300e:	f000 fc77 	bl	8003900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003014:	4618      	mov	r0, r3
 8003016:	3738      	adds	r7, #56	@ 0x38
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	@ 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	623b      	str	r3, [r7, #32]
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	61fb      	str	r3, [r7, #28]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003074:	f000 ffec 	bl	8004050 <xTaskGetSchedulerState>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <xQueueSemaphoreTake+0x64>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <xQueueSemaphoreTake+0x68>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <xQueueSemaphoreTake+0x6a>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	61bb      	str	r3, [r7, #24]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030a6:	f001 fc4f 	bl	8004948 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d024      	beq.n	8003100 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	1e5a      	subs	r2, r3, #1
 80030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80030c6:	f001 f96f 	bl	80043a8 <pvTaskIncrementMutexHeldCount>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00f      	beq.n	80030f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	3310      	adds	r3, #16
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fdf1 	bl	8003cc4 <xTaskRemoveFromEventList>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030e8:	4b54      	ldr	r3, [pc, #336]	@ (800323c <xQueueSemaphoreTake+0x21c>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030f8:	f001 fc58 	bl	80049ac <vPortExitCritical>
				return pdPASS;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e098      	b.n	8003232 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	617b      	str	r3, [r7, #20]
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003124:	f001 fc42 	bl	80049ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003128:	2300      	movs	r3, #0
 800312a:	e082      	b.n	8003232 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800312c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fe28 	bl	8003d8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003140:	f001 fc34 	bl	80049ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003144:	f000 fbce 	bl	80038e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003148:	f001 fbfe 	bl	8004948 <vPortEnterCritical>
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003152:	b25b      	sxtb	r3, r3
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003158:	d103      	bne.n	8003162 <xQueueSemaphoreTake+0x142>
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003168:	b25b      	sxtb	r3, r3
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800316e:	d103      	bne.n	8003178 <xQueueSemaphoreTake+0x158>
 8003170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003178:	f001 fc18 	bl	80049ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317c:	463a      	mov	r2, r7
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fe17 	bl	8003db8 <xTaskCheckForTimeOut>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d132      	bne.n	80031f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003190:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003192:	f000 f929 	bl	80033e8 <prvIsQueueEmpty>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d026      	beq.n	80031ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80031a4:	f001 fbd0 	bl	8004948 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 ff6d 	bl	800408c <xTaskPriorityInherit>
 80031b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80031b4:	f001 fbfa 	bl	80049ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	3324      	adds	r3, #36	@ 0x24
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fd59 	bl	8003c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031c8:	f000 f8bc 	bl	8003344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031cc:	f000 fb98 	bl	8003900 <xTaskResumeAll>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f47f af67 	bne.w	80030a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <xQueueSemaphoreTake+0x21c>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	e75d      	b.n	80030a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80031ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031ec:	f000 f8aa 	bl	8003344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f0:	f000 fb86 	bl	8003900 <xTaskResumeAll>
 80031f4:	e757      	b.n	80030a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031f8:	f000 f8a4 	bl	8003344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031fc:	f000 fb80 	bl	8003900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003202:	f000 f8f1 	bl	80033e8 <prvIsQueueEmpty>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	f43f af4c 	beq.w	80030a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003214:	f001 fb98 	bl	8004948 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003218:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800321a:	f000 f811 	bl	8003240 <prvGetDisinheritPriorityAfterTimeout>
 800321e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003226:	4618      	mov	r0, r3
 8003228:	f001 f82e 	bl	8004288 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800322c:	f001 fbbe 	bl	80049ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003232:	4618      	mov	r0, r3
 8003234:	3738      	adds	r7, #56	@ 0x38
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e001      	b.n	8003262 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003262:	68fb      	ldr	r3, [r7, #12]
	}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10d      	bne.n	80032aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d14d      	bne.n	8003332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 ff6c 	bl	8004178 <xTaskPriorityDisinherit>
 80032a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	e043      	b.n	8003332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d119      	bne.n	80032e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6858      	ldr	r0, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	461a      	mov	r2, r3
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	f001 fe9e 	bl	8004ffc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	441a      	add	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d32b      	bcc.n	8003332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e026      	b.n	8003332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68d8      	ldr	r0, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	461a      	mov	r2, r3
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	f001 fe84 	bl	8004ffc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	425b      	negs	r3, r3
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d207      	bcs.n	8003320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	425b      	negs	r3, r3
 800331a:	441a      	add	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d105      	bne.n	8003332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3b01      	subs	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800333a:	697b      	ldr	r3, [r7, #20]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800334c:	f001 fafc 	bl	8004948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003358:	e011      	b.n	800337e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	@ 0x24
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fcac 	bl	8003cc4 <xTaskRemoveFromEventList>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003372:	f000 fd85 	bl	8003e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	dce9      	bgt.n	800335a <prvUnlockQueue+0x16>
 8003386:	e000      	b.n	800338a <prvUnlockQueue+0x46>
					break;
 8003388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	22ff      	movs	r2, #255	@ 0xff
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003392:	f001 fb0b 	bl	80049ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003396:	f001 fad7 	bl	8004948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a2:	e011      	b.n	80033c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3310      	adds	r3, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fc87 	bl	8003cc4 <xTaskRemoveFromEventList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033bc:	f000 fd60 	bl	8003e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dce9      	bgt.n	80033a4 <prvUnlockQueue+0x60>
 80033d0:	e000      	b.n	80033d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	22ff      	movs	r2, #255	@ 0xff
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033dc:	f001 fae6 	bl	80049ac <vPortExitCritical>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f0:	f001 faaa 	bl	8004948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e001      	b.n	8003406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003406:	f001 fad1 	bl	80049ac <vPortExitCritical>

	return xReturn;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800341c:	f001 fa94 	bl	8004948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	429a      	cmp	r2, r3
 800342a:	d102      	bne.n	8003432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e001      	b.n	8003436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003436:	f001 fab9 	bl	80049ac <vPortExitCritical>

	return xReturn;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	@ 0x38
 8003448:	af04      	add	r7, sp, #16
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	623b      	str	r3, [r7, #32]
}
 800346a:	bf00      	nop
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	61fb      	str	r3, [r7, #28]
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800348e:	23a0      	movs	r3, #160	@ 0xa0
 8003490:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2ba0      	cmp	r3, #160	@ 0xa0
 8003496:	d00b      	beq.n	80034b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	61bb      	str	r3, [r7, #24]
}
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01e      	beq.n	80034f6 <xTaskCreateStatic+0xb2>
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01b      	beq.n	80034f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034d0:	2300      	movs	r3, #0
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f851 	bl	8003590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034f0:	f000 f8ee 	bl	80036d0 <prvAddNewTaskToReadyList>
 80034f4:	e001      	b.n	80034fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034fa:	697b      	ldr	r3, [r7, #20]
	}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3728      	adds	r7, #40	@ 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	@ 0x30
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f001 faf5 	bl	8004b08 <pvPortMalloc>
 800351e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003526:	20a0      	movs	r0, #160	@ 0xa0
 8003528:	f001 faee 	bl	8004b08 <pvPortMalloc>
 800352c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
 800353a:	e005      	b.n	8003548 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800353c:	6978      	ldr	r0, [r7, #20]
 800353e:	f001 fbb1 	bl	8004ca4 <vPortFree>
 8003542:	e001      	b.n	8003548 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	2300      	movs	r3, #0
 800355a:	9303      	str	r3, [sp, #12]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f80f 	bl	8003590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003572:	69f8      	ldr	r0, [r7, #28]
 8003574:	f000 f8ac 	bl	80036d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003578:	2301      	movs	r3, #1
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	e002      	b.n	8003584 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003582:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003584:	69bb      	ldr	r3, [r7, #24]
	}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035a8:	3b01      	subs	r3, #1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f023 0307 	bic.w	r3, r3, #7
 80035b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <prvInitialiseNewTask+0x4a>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	617b      	str	r3, [r7, #20]
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	e7fd      	b.n	80035d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01f      	beq.n	8003620 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e012      	b.n	800360c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	7819      	ldrb	r1, [r3, #0]
 80035ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	3334      	adds	r3, #52	@ 0x34
 80035f6:	460a      	mov	r2, r1
 80035f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3301      	adds	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d9e9      	bls.n	80035e6 <prvInitialiseNewTask+0x56>
 8003612:	e000      	b.n	8003616 <prvInitialiseNewTask+0x86>
			{
				break;
 8003614:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800361e:	e003      	b.n	8003628 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	2b06      	cmp	r3, #6
 800362c:	d901      	bls.n	8003632 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800362e:	2306      	movs	r3, #6
 8003630:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003636:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2200      	movs	r2, #0
 8003642:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f9c4 	bl	80029d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	3318      	adds	r3, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff f9bf 	bl	80029d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	f1c3 0207 	rsb	r2, r3, #7
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800366e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003670:	2200      	movs	r2, #0
 8003672:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	334c      	adds	r3, #76	@ 0x4c
 8003682:	224c      	movs	r2, #76	@ 0x4c
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fc2c 	bl	8004ee4 <memset>
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <prvInitialiseNewTask+0x134>)
 8003690:	651a      	str	r2, [r3, #80]	@ 0x50
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <prvInitialiseNewTask+0x138>)
 8003696:	655a      	str	r2, [r3, #84]	@ 0x54
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <prvInitialiseNewTask+0x13c>)
 800369c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68f9      	ldr	r1, [r7, #12]
 80036a2:	69b8      	ldr	r0, [r7, #24]
 80036a4:	f001 f81c 	bl	80046e0 <pxPortInitialiseStack>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ba:	bf00      	nop
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20004118 	.word	0x20004118
 80036c8:	20004180 	.word	0x20004180
 80036cc:	200041e8 	.word	0x200041e8

080036d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036d8:	f001 f936 	bl	8004948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <prvAddNewTaskToReadyList+0xb8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a29      	ldr	r2, [pc, #164]	@ (8003788 <prvAddNewTaskToReadyList+0xb8>)
 80036e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036e6:	4b29      	ldr	r3, [pc, #164]	@ (800378c <prvAddNewTaskToReadyList+0xbc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <prvAddNewTaskToReadyList+0xbc>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <prvAddNewTaskToReadyList+0xb8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d110      	bne.n	800371e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036fc:	f000 fbe4 	bl	8003ec8 <prvInitialiseTaskLists>
 8003700:	e00d      	b.n	800371e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <prvAddNewTaskToReadyList+0xc0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <prvAddNewTaskToReadyList+0xbc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	429a      	cmp	r2, r3
 8003716:	d802      	bhi.n	800371e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003718:	4a1c      	ldr	r2, [pc, #112]	@ (800378c <prvAddNewTaskToReadyList+0xbc>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800371e:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <prvAddNewTaskToReadyList+0xc4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <prvAddNewTaskToReadyList+0xc4>)
 8003726:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <prvAddNewTaskToReadyList+0xc8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <prvAddNewTaskToReadyList+0xc8>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a15      	ldr	r2, [pc, #84]	@ (800379c <prvAddNewTaskToReadyList+0xcc>)
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7ff f94d 	bl	80029f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003756:	f001 f929 	bl	80049ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <prvAddNewTaskToReadyList+0xc0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <prvAddNewTaskToReadyList+0xbc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	429a      	cmp	r2, r3
 800376e:	d207      	bcs.n	8003780 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <prvAddNewTaskToReadyList+0xd0>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200004c4 	.word	0x200004c4
 800378c:	200003c4 	.word	0x200003c4
 8003790:	200004d0 	.word	0x200004d0
 8003794:	200004e0 	.word	0x200004e0
 8003798:	200004cc 	.word	0x200004cc
 800379c:	200003c8 	.word	0x200003c8
 80037a0:	e000ed04 	.word	0xe000ed04

080037a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037b6:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <vTaskDelay+0x64>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <vTaskDelay+0x32>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	60bb      	str	r3, [r7, #8]
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037d6:	f000 f885 	bl	80038e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037da:	2100      	movs	r1, #0
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 ff19 	bl	8004614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037e2:	f000 f88d 	bl	8003900 <xTaskResumeAll>
 80037e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037ee:	4b07      	ldr	r3, [pc, #28]	@ (800380c <vTaskDelay+0x68>)
 80037f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200004ec 	.word	0x200004ec
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	@ 0x28
 8003814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800381e:	463a      	mov	r2, r7
 8003820:	1d39      	adds	r1, r7, #4
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe70 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	9202      	str	r2, [sp, #8]
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	2300      	movs	r3, #0
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2300      	movs	r3, #0
 800383c:	460a      	mov	r2, r1
 800383e:	4921      	ldr	r1, [pc, #132]	@ (80038c4 <vTaskStartScheduler+0xb4>)
 8003840:	4821      	ldr	r0, [pc, #132]	@ (80038c8 <vTaskStartScheduler+0xb8>)
 8003842:	f7ff fdff 	bl	8003444 <xTaskCreateStatic>
 8003846:	4603      	mov	r3, r0
 8003848:	4a20      	ldr	r2, [pc, #128]	@ (80038cc <vTaskStartScheduler+0xbc>)
 800384a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <vTaskStartScheduler+0xbc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003854:	2301      	movs	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e001      	b.n	800385e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d11b      	bne.n	800389c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	613b      	str	r3, [r7, #16]
}
 8003876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003878:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <vTaskStartScheduler+0xc0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	334c      	adds	r3, #76	@ 0x4c
 800387e:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <vTaskStartScheduler+0xc4>)
 8003880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <vTaskStartScheduler+0xc8>)
 8003884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <vTaskStartScheduler+0xcc>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <vTaskStartScheduler+0xd0>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003896:	f000 ffb3 	bl	8004800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800389a:	e00f      	b.n	80038bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a2:	d10b      	bne.n	80038bc <vTaskStartScheduler+0xac>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60fb      	str	r3, [r7, #12]
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <vTaskStartScheduler+0xa8>
}
 80038bc:	bf00      	nop
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	080051b8 	.word	0x080051b8
 80038c8:	08003e99 	.word	0x08003e99
 80038cc:	200004e8 	.word	0x200004e8
 80038d0:	200003c4 	.word	0x200003c4
 80038d4:	20000010 	.word	0x20000010
 80038d8:	200004e4 	.word	0x200004e4
 80038dc:	200004d0 	.word	0x200004d0
 80038e0:	200004c8 	.word	0x200004c8

080038e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038e8:	4b04      	ldr	r3, [pc, #16]	@ (80038fc <vTaskSuspendAll+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a03      	ldr	r2, [pc, #12]	@ (80038fc <vTaskSuspendAll+0x18>)
 80038f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	200004ec 	.word	0x200004ec

08003900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800390e:	4b42      	ldr	r3, [pc, #264]	@ (8003a18 <xTaskResumeAll+0x118>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <xTaskResumeAll+0x2e>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	603b      	str	r3, [r7, #0]
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800392e:	f001 f80b 	bl	8004948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003932:	4b39      	ldr	r3, [pc, #228]	@ (8003a18 <xTaskResumeAll+0x118>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	4a37      	ldr	r2, [pc, #220]	@ (8003a18 <xTaskResumeAll+0x118>)
 800393a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393c:	4b36      	ldr	r3, [pc, #216]	@ (8003a18 <xTaskResumeAll+0x118>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d161      	bne.n	8003a08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003944:	4b35      	ldr	r3, [pc, #212]	@ (8003a1c <xTaskResumeAll+0x11c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05d      	beq.n	8003a08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394c:	e02e      	b.n	80039ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394e:	4b34      	ldr	r3, [pc, #208]	@ (8003a20 <xTaskResumeAll+0x120>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3318      	adds	r3, #24
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f8a5 	bl	8002aaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f8a0 	bl	8002aaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	2201      	movs	r2, #1
 8003970:	409a      	lsls	r2, r3
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <xTaskResumeAll+0x124>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <xTaskResumeAll+0x124>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <xTaskResumeAll+0x128>)
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7ff f82c 	bl	80029f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399c:	4b23      	ldr	r3, [pc, #140]	@ (8003a2c <xTaskResumeAll+0x12c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039a6:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <xTaskResumeAll+0x130>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <xTaskResumeAll+0x120>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1cc      	bne.n	800394e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039ba:	f000 fb29 	bl	8004010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039be:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <xTaskResumeAll+0x134>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039ca:	f000 f837 	bl	8003a3c <xTaskIncrementTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039d4:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <xTaskResumeAll+0x130>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f1      	bne.n	80039ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039e6:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <xTaskResumeAll+0x134>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <xTaskResumeAll+0x130>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <xTaskResumeAll+0x138>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a08:	f000 ffd0 	bl	80049ac <vPortExitCritical>

	return xAlreadyYielded;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200004ec 	.word	0x200004ec
 8003a1c:	200004c4 	.word	0x200004c4
 8003a20:	20000484 	.word	0x20000484
 8003a24:	200004cc 	.word	0x200004cc
 8003a28:	200003c8 	.word	0x200003c8
 8003a2c:	200003c4 	.word	0x200003c4
 8003a30:	200004d8 	.word	0x200004d8
 8003a34:	200004d4 	.word	0x200004d4
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b4f      	ldr	r3, [pc, #316]	@ (8003b84 <xTaskIncrementTick+0x148>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 808f 	bne.w	8003b6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <xTaskIncrementTick+0x14c>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a64:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	603b      	str	r3, [r7, #0]
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	e7fd      	b.n	8003a82 <xTaskIncrementTick+0x46>
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <xTaskIncrementTick+0x154>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3e      	ldr	r2, [pc, #248]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4a3e      	ldr	r2, [pc, #248]	@ (8003b90 <xTaskIncrementTick+0x154>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <xTaskIncrementTick+0x158>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003b94 <xTaskIncrementTick+0x158>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	f000 fab4 	bl	8004010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d348      	bcc.n	8003b44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac2:	601a      	str	r2, [r3, #0]
					break;
 8003ac4:	e03e      	b.n	8003b44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <xTaskIncrementTick+0x150>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d203      	bcs.n	8003ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ade:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <xTaskIncrementTick+0x15c>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ae4:	e02e      	b.n	8003b44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ffdd 	bl	8002aaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3318      	adds	r3, #24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ffd4 	bl	8002aaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	2201      	movs	r2, #1
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <xTaskIncrementTick+0x160>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <xTaskIncrementTick+0x160>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <xTaskIncrementTick+0x164>)
 8003b22:	441a      	add	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fe ff60 	bl	80029f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <xTaskIncrementTick+0x168>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b9      	bcc.n	8003ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b42:	e7b6      	b.n	8003ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b44:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <xTaskIncrementTick+0x168>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4a:	4915      	ldr	r1, [pc, #84]	@ (8003ba0 <xTaskIncrementTick+0x164>)
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d901      	bls.n	8003b60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <xTaskIncrementTick+0x16c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e004      	b.n	8003b78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <xTaskIncrementTick+0x170>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3301      	adds	r3, #1
 8003b74:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <xTaskIncrementTick+0x170>)
 8003b76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b78:	697b      	ldr	r3, [r7, #20]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200004ec 	.word	0x200004ec
 8003b88:	200004c8 	.word	0x200004c8
 8003b8c:	2000047c 	.word	0x2000047c
 8003b90:	20000480 	.word	0x20000480
 8003b94:	200004dc 	.word	0x200004dc
 8003b98:	200004e4 	.word	0x200004e4
 8003b9c:	200004cc 	.word	0x200004cc
 8003ba0:	200003c8 	.word	0x200003c8
 8003ba4:	200003c4 	.word	0x200003c4
 8003ba8:	200004d8 	.word	0x200004d8
 8003bac:	200004d4 	.word	0x200004d4

08003bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <vTaskSwitchContext+0xb0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bbe:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <vTaskSwitchContext+0xb4>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bc4:	e045      	b.n	8003c52 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003bc6:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <vTaskSwitchContext+0xb4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <vTaskSwitchContext+0xb8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	f1c3 031f 	rsb	r3, r3, #31
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	4922      	ldr	r1, [pc, #136]	@ (8003c6c <vTaskSwitchContext+0xbc>)
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <vTaskSwitchContext+0x5e>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	607b      	str	r3, [r7, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <vTaskSwitchContext+0x5a>
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4a14      	ldr	r2, [pc, #80]	@ (8003c6c <vTaskSwitchContext+0xbc>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d104      	bne.n	8003c3e <vTaskSwitchContext+0x8e>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <vTaskSwitchContext+0xc0>)
 8003c46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c48:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <vTaskSwitchContext+0xc0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	334c      	adds	r3, #76	@ 0x4c
 8003c4e:	4a09      	ldr	r2, [pc, #36]	@ (8003c74 <vTaskSwitchContext+0xc4>)
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	200004ec 	.word	0x200004ec
 8003c64:	200004d8 	.word	0x200004d8
 8003c68:	200004cc 	.word	0x200004cc
 8003c6c:	200003c8 	.word	0x200003c8
 8003c70:	200003c4 	.word	0x200003c4
 8003c74:	20000010 	.word	0x20000010

08003c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	e7fd      	b.n	8003c9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <vTaskPlaceOnEventList+0x48>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fe fec5 	bl	8002a38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cae:	2101      	movs	r1, #1
 8003cb0:	6838      	ldr	r0, [r7, #0]
 8003cb2:	f000 fcaf 	bl	8004614 <prvAddCurrentTaskToDelayedList>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200003c4 	.word	0x200003c4

08003cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60fb      	str	r3, [r7, #12]
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	e7fd      	b.n	8003cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fed7 	bl	8002aaa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d74 <xTaskRemoveFromEventList+0xb0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11c      	bne.n	8003d3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fece 	bl	8002aaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	2201      	movs	r2, #1
 8003d14:	409a      	lsls	r2, r3
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <xTaskRemoveFromEventList+0xb4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <xTaskRemoveFromEventList+0xb4>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <xTaskRemoveFromEventList+0xb8>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fe5a 	bl	80029f0 <vListInsertEnd>
 8003d3c:	e005      	b.n	8003d4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3318      	adds	r3, #24
 8003d42:	4619      	mov	r1, r3
 8003d44:	480e      	ldr	r0, [pc, #56]	@ (8003d80 <xTaskRemoveFromEventList+0xbc>)
 8003d46:	f7fe fe53 	bl	80029f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <xTaskRemoveFromEventList+0xc0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d905      	bls.n	8003d64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <xTaskRemoveFromEventList+0xc4>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e001      	b.n	8003d68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d68:	697b      	ldr	r3, [r7, #20]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200004ec 	.word	0x200004ec
 8003d78:	200004cc 	.word	0x200004cc
 8003d7c:	200003c8 	.word	0x200003c8
 8003d80:	20000484 	.word	0x20000484
 8003d84:	200003c4 	.word	0x200003c4
 8003d88:	200004d8 	.word	0x200004d8

08003d8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <vTaskInternalSetTimeOutState+0x24>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <vTaskInternalSetTimeOutState+0x28>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	605a      	str	r2, [r3, #4]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	200004dc 	.word	0x200004dc
 8003db4:	200004c8 	.word	0x200004c8

08003db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	60fb      	str	r3, [r7, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003dfe:	f000 fda3 	bl	8004948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e02:	4b1d      	ldr	r3, [pc, #116]	@ (8003e78 <xTaskCheckForTimeOut+0xc0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e1a:	d102      	bne.n	8003e22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e023      	b.n	8003e6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <xTaskCheckForTimeOut+0xc4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d007      	beq.n	8003e3e <xTaskCheckForTimeOut+0x86>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e015      	b.n	8003e6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d20b      	bcs.n	8003e60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff99 	bl	8003d8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e004      	b.n	8003e6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e6a:	f000 fd9f 	bl	80049ac <vPortExitCritical>

	return xReturn;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	200004c8 	.word	0x200004c8
 8003e7c:	200004dc 	.word	0x200004dc

08003e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e84:	4b03      	ldr	r3, [pc, #12]	@ (8003e94 <vTaskMissedYield+0x14>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	200004d8 	.word	0x200004d8

08003e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ea0:	f000 f852 	bl	8003f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <prvIdleTask+0x28>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d9f9      	bls.n	8003ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <prvIdleTask+0x2c>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ebc:	e7f0      	b.n	8003ea0 <prvIdleTask+0x8>
 8003ebe:	bf00      	nop
 8003ec0:	200003c8 	.word	0x200003c8
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	e00c      	b.n	8003eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <prvInitialiseTaskLists+0x60>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fd57 	bl	8002996 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d9ef      	bls.n	8003ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef4:	480d      	ldr	r0, [pc, #52]	@ (8003f2c <prvInitialiseTaskLists+0x64>)
 8003ef6:	f7fe fd4e 	bl	8002996 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003efa:	480d      	ldr	r0, [pc, #52]	@ (8003f30 <prvInitialiseTaskLists+0x68>)
 8003efc:	f7fe fd4b 	bl	8002996 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f00:	480c      	ldr	r0, [pc, #48]	@ (8003f34 <prvInitialiseTaskLists+0x6c>)
 8003f02:	f7fe fd48 	bl	8002996 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f06:	480c      	ldr	r0, [pc, #48]	@ (8003f38 <prvInitialiseTaskLists+0x70>)
 8003f08:	f7fe fd45 	bl	8002996 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f0c:	480b      	ldr	r0, [pc, #44]	@ (8003f3c <prvInitialiseTaskLists+0x74>)
 8003f0e:	f7fe fd42 	bl	8002996 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f12:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <prvInitialiseTaskLists+0x78>)
 8003f14:	4a05      	ldr	r2, [pc, #20]	@ (8003f2c <prvInitialiseTaskLists+0x64>)
 8003f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <prvInitialiseTaskLists+0x7c>)
 8003f1a:	4a05      	ldr	r2, [pc, #20]	@ (8003f30 <prvInitialiseTaskLists+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200003c8 	.word	0x200003c8
 8003f2c:	20000454 	.word	0x20000454
 8003f30:	20000468 	.word	0x20000468
 8003f34:	20000484 	.word	0x20000484
 8003f38:	20000498 	.word	0x20000498
 8003f3c:	200004b0 	.word	0x200004b0
 8003f40:	2000047c 	.word	0x2000047c
 8003f44:	20000480 	.word	0x20000480

08003f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4e:	e019      	b.n	8003f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f50:	f000 fcfa 	bl	8004948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f54:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <prvCheckTasksWaitingTermination+0x50>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fda2 	bl	8002aaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f9c <prvCheckTasksWaitingTermination+0x54>)
 8003f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f7a:	f000 fd17 	bl	80049ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f810 	bl	8003fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <prvCheckTasksWaitingTermination+0x58>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e1      	bne.n	8003f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000498 	.word	0x20000498
 8003f9c:	200004c4 	.word	0x200004c4
 8003fa0:	200004ac 	.word	0x200004ac

08003fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	334c      	adds	r3, #76	@ 0x4c
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 ffc5 	bl	8004f40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fe6d 	bl	8004ca4 <vPortFree>
				vPortFree( pxTCB );
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fe6a 	bl	8004ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fd0:	e019      	b.n	8004006 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d103      	bne.n	8003fe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fe61 	bl	8004ca4 <vPortFree>
	}
 8003fe2:	e010      	b.n	8004006 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d00b      	beq.n	8004006 <prvDeleteTCB+0x62>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	60fb      	str	r3, [r7, #12]
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <prvDeleteTCB+0x5e>
	}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004016:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <prvResetNextTaskUnblockTime+0x38>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <prvResetNextTaskUnblockTime+0x3c>)
 8004022:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004028:	e008      	b.n	800403c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <prvResetNextTaskUnblockTime+0x38>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a04      	ldr	r2, [pc, #16]	@ (800404c <prvResetNextTaskUnblockTime+0x3c>)
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	2000047c 	.word	0x2000047c
 800404c:	200004e4 	.word	0x200004e4

08004050 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004056:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <xTaskGetSchedulerState+0x34>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800405e:	2301      	movs	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	e008      	b.n	8004076 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <xTaskGetSchedulerState+0x38>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800406c:	2302      	movs	r3, #2
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	e001      	b.n	8004076 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004076:	687b      	ldr	r3, [r7, #4]
	}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	200004d0 	.word	0x200004d0
 8004088:	200004ec 	.word	0x200004ec

0800408c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d05e      	beq.n	8004160 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <xTaskPriorityInherit+0xe0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d24e      	bcs.n	800414e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db06      	blt.n	80040c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b8:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <xTaskPriorityInherit+0xe0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	f1c3 0207 	rsb	r2, r3, #7
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6959      	ldr	r1, [r3, #20]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <xTaskPriorityInherit+0xe4>)
 80040d8:	4413      	add	r3, r2
 80040da:	4299      	cmp	r1, r3
 80040dc:	d12f      	bne.n	800413e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fce1 	bl	8002aaa <uxListRemove>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	2201      	movs	r2, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43da      	mvns	r2, r3
 80040fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <xTaskPriorityInherit+0xe8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4013      	ands	r3, r2
 8004100:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <xTaskPriorityInherit+0xe8>)
 8004102:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <xTaskPriorityInherit+0xe0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	2201      	movs	r2, #1
 8004114:	409a      	lsls	r2, r3
 8004116:	4b17      	ldr	r3, [pc, #92]	@ (8004174 <xTaskPriorityInherit+0xe8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <xTaskPriorityInherit+0xe8>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <xTaskPriorityInherit+0xe4>)
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7fe fc5a 	bl	80029f0 <vListInsertEnd>
 800413c:	e004      	b.n	8004148 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800413e:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <xTaskPriorityInherit+0xe0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e008      	b.n	8004160 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <xTaskPriorityInherit+0xe0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d201      	bcs.n	8004160 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004160:	68fb      	ldr	r3, [r7, #12]
	}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200003c4 	.word	0x200003c4
 8004170:	200003c8 	.word	0x200003c8
 8004174:	200004cc 	.word	0x200004cc

08004178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d070      	beq.n	8004270 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800418e:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <xTaskPriorityDisinherit+0x104>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	429a      	cmp	r2, r3
 8004196:	d00b      	beq.n	80041b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60fb      	str	r3, [r7, #12]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	60bb      	str	r3, [r7, #8]
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	1e5a      	subs	r2, r3, #1
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d044      	beq.n	8004270 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d140      	bne.n	8004270 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fc59 	bl	8002aaa <uxListRemove>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d115      	bne.n	800422a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	491f      	ldr	r1, [pc, #124]	@ (8004280 <xTaskPriorityDisinherit+0x108>)
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskPriorityDisinherit+0xb2>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	2201      	movs	r2, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <xTaskPriorityDisinherit+0x10c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4013      	ands	r3, r2
 8004226:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <xTaskPriorityDisinherit+0x10c>)
 8004228:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	f1c3 0207 	rsb	r2, r3, #7
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <xTaskPriorityDisinherit+0x10c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <xTaskPriorityDisinherit+0x10c>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4a08      	ldr	r2, [pc, #32]	@ (8004280 <xTaskPriorityDisinherit+0x108>)
 800425e:	441a      	add	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f7fe fbc2 	bl	80029f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004270:	697b      	ldr	r3, [r7, #20]
	}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200003c4 	.word	0x200003c4
 8004280:	200003c8 	.word	0x200003c8
 8004284:	200004cc 	.word	0x200004cc

08004288 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004296:	2301      	movs	r3, #1
 8004298:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d079      	beq.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d902      	bls.n	80042d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e002      	b.n	80042d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d059      	beq.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d154      	bne.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042ea:	4b2c      	ldr	r3, [pc, #176]	@ (800439c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d10b      	bne.n	800430c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60bb      	str	r3, [r7, #8]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	db04      	blt.n	800432a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f1c3 0207 	rsb	r2, r3, #7
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	6959      	ldr	r1, [r3, #20]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a19      	ldr	r2, [pc, #100]	@ (80043a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800433a:	4413      	add	r3, r2
 800433c:	4299      	cmp	r1, r3
 800433e:	d129      	bne.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fbb0 	bl	8002aaa <uxListRemove>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	2201      	movs	r2, #1
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4013      	ands	r3, r2
 8004362:	4a10      	ldr	r2, [pc, #64]	@ (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004364:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	2201      	movs	r2, #1
 800436c:	409a      	lsls	r2, r3
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	4a0b      	ldr	r2, [pc, #44]	@ (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a06      	ldr	r2, [pc, #24]	@ (80043a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004386:	441a      	add	r2, r3
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe fb2e 	bl	80029f0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004394:	bf00      	nop
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200003c4 	.word	0x200003c4
 80043a0:	200003c8 	.word	0x200003c8
 80043a4:	200004cc 	.word	0x200004cc

080043a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ba:	3201      	adds	r2, #1
 80043bc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80043be:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043c0:	681b      	ldr	r3, [r3, #0]
	}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200003c4 	.word	0x200003c4

080043d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80043de:	f000 fab3 	bl	8004948 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80043e2:	4b29      	ldr	r3, [pc, #164]	@ (8004488 <xTaskNotifyWait+0xb8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d01c      	beq.n	800442a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <xTaskNotifyWait+0xb8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	43d2      	mvns	r2, r2
 80043fc:	400a      	ands	r2, r1
 80043fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004402:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <xTaskNotifyWait+0xb8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004412:	2101      	movs	r1, #1
 8004414:	6838      	ldr	r0, [r7, #0]
 8004416:	f000 f8fd 	bl	8004614 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800441a:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <xTaskNotifyWait+0xbc>)
 800441c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800442a:	f000 fabf 	bl	80049ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800442e:	f000 fa8b 	bl	8004948 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004438:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <xTaskNotifyWait+0xb8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004444:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <xTaskNotifyWait+0xb8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d002      	beq.n	8004458 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e00a      	b.n	800446e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <xTaskNotifyWait+0xb8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	43d2      	mvns	r2, r2
 8004464:	400a      	ands	r2, r1
 8004466:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <xTaskNotifyWait+0xb8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8004478:	f000 fa98 	bl	80049ac <vPortExitCritical>

		return xReturn;
 800447c:	697b      	ldr	r3, [r7, #20]
	}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200003c4 	.word	0x200003c4
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	@ 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80044a0:	2301      	movs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <xTaskGenericNotify+0x32>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61bb      	str	r3, [r7, #24]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80044c6:	f000 fa3f 	bl	8004948 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80044e0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d82e      	bhi.n	800454e <xTaskGenericNotify+0xbe>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <xTaskGenericNotify+0x68>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004573 	.word	0x08004573
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451f 	.word	0x0800451f
 8004504:	0800452f 	.word	0x0800452f
 8004508:	08004539 	.word	0x08004539
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	431a      	orrs	r2, r3
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800451c:	e02c      	b.n	8004578 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800452c:	e024      	b.n	8004578 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004536:	e01f      	b.n	8004578 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004538:	7ffb      	ldrb	r3, [r7, #31]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d004      	beq.n	8004548 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004546:	e017      	b.n	8004578 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800454c:	e014      	b.n	8004578 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004558:	d00d      	beq.n	8004576 <xTaskGenericNotify+0xe6>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	617b      	str	r3, [r7, #20]
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <xTaskGenericNotify+0xde>
					break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <xTaskGenericNotify+0xe8>

					break;
 8004576:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d13a      	bne.n	80045f4 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fa91 	bl	8002aaa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	409a      	lsls	r2, r3
 8004590:	4b1c      	ldr	r3, [pc, #112]	@ (8004604 <xTaskGenericNotify+0x174>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	4a1b      	ldr	r2, [pc, #108]	@ (8004604 <xTaskGenericNotify+0x174>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <xTaskGenericNotify+0x178>)
 80045a8:	441a      	add	r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7fe fa1d 	bl	80029f0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <xTaskGenericNotify+0x146>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	613b      	str	r3, [r7, #16]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045da:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <xTaskGenericNotify+0x17c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d907      	bls.n	80045f4 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <xTaskGenericNotify+0x180>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80045f4:	f000 f9da 	bl	80049ac <vPortExitCritical>

		return xReturn;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3728      	adds	r7, #40	@ 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200004cc 	.word	0x200004cc
 8004608:	200003c8 	.word	0x200003c8
 800460c:	200003c4 	.word	0x200003c4
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004624:	4b28      	ldr	r3, [pc, #160]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3304      	adds	r3, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fa3d 	bl	8002aaa <uxListRemove>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	4b21      	ldr	r3, [pc, #132]	@ (80046cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4013      	ands	r3, r2
 800464a:	4a20      	ldr	r2, [pc, #128]	@ (80046cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800464c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004654:	d10a      	bne.n	800466c <prvAddCurrentTaskToDelayedList+0x58>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	481a      	ldr	r0, [pc, #104]	@ (80046d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004666:	f7fe f9c3 	bl	80029f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800466a:	e026      	b.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004674:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d209      	bcs.n	8004698 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe f9d1 	bl	8002a38 <vListInsert>
}
 8004696:	e010      	b.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004698:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7fe f9c7 	bl	8002a38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046aa:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d202      	bcs.n	80046ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046b4:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200004c8 	.word	0x200004c8
 80046c8:	200003c4 	.word	0x200003c4
 80046cc:	200004cc 	.word	0x200004cc
 80046d0:	200004b0 	.word	0x200004b0
 80046d4:	20000480 	.word	0x20000480
 80046d8:	2000047c 	.word	0x2000047c
 80046dc:	200004e4 	.word	0x200004e4

080046e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b04      	subs	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b04      	subs	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004710:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <pxPortInitialiseStack+0x64>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b14      	subs	r3, #20
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b04      	subs	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f06f 0202 	mvn.w	r2, #2
 800472e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3b20      	subs	r3, #32
 8004734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	08004749 	.word	0x08004749

08004748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004752:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <prvTaskExitError+0x58>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800475a:	d00b      	beq.n	8004774 <prvTaskExitError+0x2c>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <prvTaskExitError+0x28>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60bb      	str	r3, [r7, #8]
}
 8004786:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004788:	bf00      	nop
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0fc      	beq.n	800478a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	2000000c 	.word	0x2000000c
	...

080047b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047b0:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <pxCurrentTCBConst2>)
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	6808      	ldr	r0, [r1, #0]
 80047b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	f380 8809 	msr	PSP, r0
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f380 8811 	msr	BASEPRI, r0
 80047ca:	4770      	bx	lr
 80047cc:	f3af 8000 	nop.w

080047d0 <pxCurrentTCBConst2>:
 80047d0:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop

080047d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047d8:	4808      	ldr	r0, [pc, #32]	@ (80047fc <prvPortStartFirstTask+0x24>)
 80047da:	6800      	ldr	r0, [r0, #0]
 80047dc:	6800      	ldr	r0, [r0, #0]
 80047de:	f380 8808 	msr	MSP, r0
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8814 	msr	CONTROL, r0
 80047ea:	b662      	cpsie	i
 80047ec:	b661      	cpsie	f
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	df00      	svc	0
 80047f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047fa:	bf00      	nop
 80047fc:	e000ed08 	.word	0xe000ed08

08004800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004806:	4b47      	ldr	r3, [pc, #284]	@ (8004924 <xPortStartScheduler+0x124>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a47      	ldr	r2, [pc, #284]	@ (8004928 <xPortStartScheduler+0x128>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10b      	bne.n	8004828 <xPortStartScheduler+0x28>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004828:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <xPortStartScheduler+0x124>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a3f      	ldr	r2, [pc, #252]	@ (800492c <xPortStartScheduler+0x12c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10b      	bne.n	800484a <xPortStartScheduler+0x4a>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	613b      	str	r3, [r7, #16]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <xPortStartScheduler+0x130>)
 800484c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b31      	ldr	r3, [pc, #196]	@ (8004934 <xPortStartScheduler+0x134>)
 8004870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004872:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <xPortStartScheduler+0x138>)
 8004874:	2207      	movs	r2, #7
 8004876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004878:	e009      	b.n	800488e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800487a:	4b2f      	ldr	r3, [pc, #188]	@ (8004938 <xPortStartScheduler+0x138>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3b01      	subs	r3, #1
 8004880:	4a2d      	ldr	r2, [pc, #180]	@ (8004938 <xPortStartScheduler+0x138>)
 8004882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	b2db      	uxtb	r3, r3
 800488c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b80      	cmp	r3, #128	@ 0x80
 8004898:	d0ef      	beq.n	800487a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800489a:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <xPortStartScheduler+0x138>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1c3 0307 	rsb	r3, r3, #7
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d00b      	beq.n	80048be <xPortStartScheduler+0xbe>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60bb      	str	r3, [r7, #8]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <xPortStartScheduler+0x138>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004938 <xPortStartScheduler+0x138>)
 80048c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <xPortStartScheduler+0x138>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048d0:	4a19      	ldr	r2, [pc, #100]	@ (8004938 <xPortStartScheduler+0x138>)
 80048d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048dc:	4b17      	ldr	r3, [pc, #92]	@ (800493c <xPortStartScheduler+0x13c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a16      	ldr	r2, [pc, #88]	@ (800493c <xPortStartScheduler+0x13c>)
 80048e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048e8:	4b14      	ldr	r3, [pc, #80]	@ (800493c <xPortStartScheduler+0x13c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a13      	ldr	r2, [pc, #76]	@ (800493c <xPortStartScheduler+0x13c>)
 80048ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80048f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048f4:	f000 f8da 	bl	8004aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <xPortStartScheduler+0x140>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048fe:	f000 f8f9 	bl	8004af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <xPortStartScheduler+0x144>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0f      	ldr	r2, [pc, #60]	@ (8004944 <xPortStartScheduler+0x144>)
 8004908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800490c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800490e:	f7ff ff63 	bl	80047d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004912:	f7ff f94d 	bl	8003bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004916:	f7ff ff17 	bl	8004748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	e000ed00 	.word	0xe000ed00
 8004928:	410fc271 	.word	0x410fc271
 800492c:	410fc270 	.word	0x410fc270
 8004930:	e000e400 	.word	0xe000e400
 8004934:	200004f0 	.word	0x200004f0
 8004938:	200004f4 	.word	0x200004f4
 800493c:	e000ed20 	.word	0xe000ed20
 8004940:	2000000c 	.word	0x2000000c
 8004944:	e000ef34 	.word	0xe000ef34

08004948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	607b      	str	r3, [r7, #4]
}
 8004960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <vPortEnterCritical+0x5c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	4a0e      	ldr	r2, [pc, #56]	@ (80049a4 <vPortEnterCritical+0x5c>)
 800496a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <vPortEnterCritical+0x5c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d110      	bne.n	8004996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <vPortEnterCritical+0x60>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <vPortEnterCritical+0x4e>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	603b      	str	r3, [r7, #0]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <vPortEnterCritical+0x4a>
	}
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049b2:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <vPortExitCritical+0x50>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <vPortExitCritical+0x26>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	607b      	str	r3, [r7, #4]
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049d2:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <vPortExitCritical+0x50>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a08      	ldr	r2, [pc, #32]	@ (80049fc <vPortExitCritical+0x50>)
 80049da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049dc:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <vPortExitCritical+0x50>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <vPortExitCritical+0x44>
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a00:	f3ef 8009 	mrs	r0, PSP
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <pxCurrentTCBConst>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f01e 0f10 	tst.w	lr, #16
 8004a10:	bf08      	it	eq
 8004a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	6010      	str	r0, [r2, #0]
 8004a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a24:	f380 8811 	msr	BASEPRI, r0
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f7ff f8be 	bl	8003bb0 <vTaskSwitchContext>
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f380 8811 	msr	BASEPRI, r0
 8004a3c:	bc09      	pop	{r0, r3}
 8004a3e:	6819      	ldr	r1, [r3, #0]
 8004a40:	6808      	ldr	r0, [r1, #0]
 8004a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a46:	f01e 0f10 	tst.w	lr, #16
 8004a4a:	bf08      	it	eq
 8004a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a50:	f380 8809 	msr	PSP, r0
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	f3af 8000 	nop.w

08004a60 <pxCurrentTCBConst>:
 8004a60:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
}
 8004a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a82:	f7fe ffdb 	bl	8003a3c <xTaskIncrementTick>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <SysTick_Handler+0x40>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f383 8811 	msr	BASEPRI, r3
}
 8004a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <vPortSetupTimerInterrupt+0x34>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <vPortSetupTimerInterrupt+0x38>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <vPortSetupTimerInterrupt+0x3c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <vPortSetupTimerInterrupt+0x40>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <vPortSetupTimerInterrupt+0x44>)
 8004aca:	3b01      	subs	r3, #1
 8004acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ace:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <vPortSetupTimerInterrupt+0x34>)
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e010 	.word	0xe000e010
 8004ae4:	e000e018 	.word	0xe000e018
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	10624dd3 	.word	0x10624dd3
 8004af0:	e000e014 	.word	0xe000e014

08004af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004af4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b04 <vPortEnableVFP+0x10>
 8004af8:	6801      	ldr	r1, [r0, #0]
 8004afa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004afe:	6001      	str	r1, [r0, #0]
 8004b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b02:	bf00      	nop
 8004b04:	e000ed88 	.word	0xe000ed88

08004b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b14:	f7fe fee6 	bl	80038e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b18:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <pvPortMalloc+0x184>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b20:	f000 f924 	bl	8004d6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b24:	4b5a      	ldr	r3, [pc, #360]	@ (8004c90 <pvPortMalloc+0x188>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8095 	bne.w	8004c5c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01e      	beq.n	8004b76 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b38:	2208      	movs	r2, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d015      	beq.n	8004b76 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
 8004b50:	3308      	adds	r3, #8
 8004b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <pvPortMalloc+0x6e>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	617b      	str	r3, [r7, #20]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d06f      	beq.n	8004c5c <pvPortMalloc+0x154>
 8004b7c:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <pvPortMalloc+0x18c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d86a      	bhi.n	8004c5c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b86:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <pvPortMalloc+0x190>)
 8004b88:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b8a:	4b43      	ldr	r3, [pc, #268]	@ (8004c98 <pvPortMalloc+0x190>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b90:	e004      	b.n	8004b9c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d903      	bls.n	8004bae <pvPortMalloc+0xa6>
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f1      	bne.n	8004b92 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bae:	4b37      	ldr	r3, [pc, #220]	@ (8004c8c <pvPortMalloc+0x184>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d051      	beq.n	8004c5c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	4413      	add	r3, r2
 8004bc0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d920      	bls.n	8004c1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <pvPortMalloc+0xfc>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c16:	69b8      	ldr	r0, [r7, #24]
 8004c18:	f000 f90a 	bl	8004e30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c94 <pvPortMalloc+0x18c>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	4a1b      	ldr	r2, [pc, #108]	@ (8004c94 <pvPortMalloc+0x18c>)
 8004c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c94 <pvPortMalloc+0x18c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <pvPortMalloc+0x194>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d203      	bcs.n	8004c3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c36:	4b17      	ldr	r3, [pc, #92]	@ (8004c94 <pvPortMalloc+0x18c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <pvPortMalloc+0x194>)
 8004c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <pvPortMalloc+0x188>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c52:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <pvPortMalloc+0x198>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <pvPortMalloc+0x198>)
 8004c5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c5c:	f7fe fe50 	bl	8003900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <pvPortMalloc+0x17a>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <pvPortMalloc+0x176>
	return pvReturn;
 8004c82:	69fb      	ldr	r3, [r7, #28]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	@ 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20004100 	.word	0x20004100
 8004c90:	20004114 	.word	0x20004114
 8004c94:	20004104 	.word	0x20004104
 8004c98:	200040f8 	.word	0x200040f8
 8004c9c:	20004108 	.word	0x20004108
 8004ca0:	2000410c 	.word	0x2000410c

08004ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04f      	beq.n	8004d56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	425b      	negs	r3, r3
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <vPortFree+0xbc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <vPortFree+0x46>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <vPortFree+0x66>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <vPortFree+0xbc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01e      	beq.n	8004d56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d11a      	bne.n	8004d56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <vPortFree+0xbc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d30:	f7fe fdd8 	bl	80038e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <vPortFree+0xc0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4a09      	ldr	r2, [pc, #36]	@ (8004d64 <vPortFree+0xc0>)
 8004d40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f000 f874 	bl	8004e30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d48:	4b07      	ldr	r3, [pc, #28]	@ (8004d68 <vPortFree+0xc4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a06      	ldr	r2, [pc, #24]	@ (8004d68 <vPortFree+0xc4>)
 8004d50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d52:	f7fe fdd5 	bl	8003900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20004114 	.word	0x20004114
 8004d64:	20004104 	.word	0x20004104
 8004d68:	20004110 	.word	0x20004110

08004d6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d78:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <prvHeapInit+0xac>)
 8004d7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3307      	adds	r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e18 <prvHeapInit+0xac>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004da4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <prvHeapInit+0xb0>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004daa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e1c <prvHeapInit+0xb0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004db8:	2208      	movs	r2, #8
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <prvHeapInit+0xb4>)
 8004dcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dce:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <prvHeapInit+0xb4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <prvHeapInit+0xb4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dec:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <prvHeapInit+0xb4>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e24 <prvHeapInit+0xb8>)
 8004dfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <prvHeapInit+0xbc>)
 8004e02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e04:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <prvHeapInit+0xc0>)
 8004e06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	200004f8 	.word	0x200004f8
 8004e1c:	200040f8 	.word	0x200040f8
 8004e20:	20004100 	.word	0x20004100
 8004e24:	20004108 	.word	0x20004108
 8004e28:	20004104 	.word	0x20004104
 8004e2c:	20004114 	.word	0x20004114

08004e30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e38:	4b28      	ldr	r3, [pc, #160]	@ (8004edc <prvInsertBlockIntoFreeList+0xac>)
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e002      	b.n	8004e44 <prvInsertBlockIntoFreeList+0x14>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d8f7      	bhi.n	8004e3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4413      	add	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d108      	bne.n	8004e72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d118      	bne.n	8004eb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d00d      	beq.n	8004eae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e008      	b.n	8004ec0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e003      	b.n	8004ec0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d002      	beq.n	8004ece <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	200040f8 	.word	0x200040f8
 8004ee0:	20004100 	.word	0x20004100

08004ee4 <memset>:
 8004ee4:	4402      	add	r2, r0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d100      	bne.n	8004eee <memset+0xa>
 8004eec:	4770      	bx	lr
 8004eee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef2:	e7f9      	b.n	8004ee8 <memset+0x4>

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8004f2c <__libc_init_array+0x38>)
 8004ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f30 <__libc_init_array+0x3c>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	2600      	movs	r6, #0
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	4d0b      	ldr	r5, [pc, #44]	@ (8004f34 <__libc_init_array+0x40>)
 8004f06:	4c0c      	ldr	r4, [pc, #48]	@ (8004f38 <__libc_init_array+0x44>)
 8004f08:	f000 f8dc 	bl	80050c4 <_init>
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	2600      	movs	r6, #0
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	080051e0 	.word	0x080051e0
 8004f30:	080051e0 	.word	0x080051e0
 8004f34:	080051e0 	.word	0x080051e0
 8004f38:	080051e4 	.word	0x080051e4

08004f3c <__retarget_lock_acquire_recursive>:
 8004f3c:	4770      	bx	lr

08004f3e <__retarget_lock_release_recursive>:
 8004f3e:	4770      	bx	lr

08004f40 <_reclaim_reent>:
 8004f40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <_reclaim_reent+0xb8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4283      	cmp	r3, r0
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	d053      	beq.n	8004ff4 <_reclaim_reent+0xb4>
 8004f4c:	69c3      	ldr	r3, [r0, #28]
 8004f4e:	b31b      	cbz	r3, 8004f98 <_reclaim_reent+0x58>
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	b163      	cbz	r3, 8004f6e <_reclaim_reent+0x2e>
 8004f54:	2500      	movs	r5, #0
 8004f56:	69e3      	ldr	r3, [r4, #28]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	5959      	ldr	r1, [r3, r5]
 8004f5c:	b9b1      	cbnz	r1, 8004f8c <_reclaim_reent+0x4c>
 8004f5e:	3504      	adds	r5, #4
 8004f60:	2d80      	cmp	r5, #128	@ 0x80
 8004f62:	d1f8      	bne.n	8004f56 <_reclaim_reent+0x16>
 8004f64:	69e3      	ldr	r3, [r4, #28]
 8004f66:	4620      	mov	r0, r4
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	f000 f855 	bl	8005018 <_free_r>
 8004f6e:	69e3      	ldr	r3, [r4, #28]
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	b111      	cbz	r1, 8004f7a <_reclaim_reent+0x3a>
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 f84f 	bl	8005018 <_free_r>
 8004f7a:	69e3      	ldr	r3, [r4, #28]
 8004f7c:	689d      	ldr	r5, [r3, #8]
 8004f7e:	b15d      	cbz	r5, 8004f98 <_reclaim_reent+0x58>
 8004f80:	4629      	mov	r1, r5
 8004f82:	4620      	mov	r0, r4
 8004f84:	682d      	ldr	r5, [r5, #0]
 8004f86:	f000 f847 	bl	8005018 <_free_r>
 8004f8a:	e7f8      	b.n	8004f7e <_reclaim_reent+0x3e>
 8004f8c:	680e      	ldr	r6, [r1, #0]
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 f842 	bl	8005018 <_free_r>
 8004f94:	4631      	mov	r1, r6
 8004f96:	e7e1      	b.n	8004f5c <_reclaim_reent+0x1c>
 8004f98:	6961      	ldr	r1, [r4, #20]
 8004f9a:	b111      	cbz	r1, 8004fa2 <_reclaim_reent+0x62>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 f83b 	bl	8005018 <_free_r>
 8004fa2:	69e1      	ldr	r1, [r4, #28]
 8004fa4:	b111      	cbz	r1, 8004fac <_reclaim_reent+0x6c>
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 f836 	bl	8005018 <_free_r>
 8004fac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004fae:	b111      	cbz	r1, 8004fb6 <_reclaim_reent+0x76>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 f831 	bl	8005018 <_free_r>
 8004fb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fb8:	b111      	cbz	r1, 8004fc0 <_reclaim_reent+0x80>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 f82c 	bl	8005018 <_free_r>
 8004fc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004fc2:	b111      	cbz	r1, 8004fca <_reclaim_reent+0x8a>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 f827 	bl	8005018 <_free_r>
 8004fca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004fcc:	b111      	cbz	r1, 8004fd4 <_reclaim_reent+0x94>
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f000 f822 	bl	8005018 <_free_r>
 8004fd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004fd6:	b111      	cbz	r1, 8004fde <_reclaim_reent+0x9e>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 f81d 	bl	8005018 <_free_r>
 8004fde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004fe0:	b111      	cbz	r1, 8004fe8 <_reclaim_reent+0xa8>
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 f818 	bl	8005018 <_free_r>
 8004fe8:	6a23      	ldr	r3, [r4, #32]
 8004fea:	b11b      	cbz	r3, 8004ff4 <_reclaim_reent+0xb4>
 8004fec:	4620      	mov	r0, r4
 8004fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ff2:	4718      	bx	r3
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000010 	.word	0x20000010

08004ffc <memcpy>:
 8004ffc:	440a      	add	r2, r1
 8004ffe:	4291      	cmp	r1, r2
 8005000:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005004:	d100      	bne.n	8005008 <memcpy+0xc>
 8005006:	4770      	bx	lr
 8005008:	b510      	push	{r4, lr}
 800500a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005012:	4291      	cmp	r1, r2
 8005014:	d1f9      	bne.n	800500a <memcpy+0xe>
 8005016:	bd10      	pop	{r4, pc}

08005018 <_free_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	2900      	cmp	r1, #0
 800501e:	d041      	beq.n	80050a4 <_free_r+0x8c>
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f0c      	subs	r4, r1, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfb8      	it	lt
 800502a:	18e4      	addlt	r4, r4, r3
 800502c:	f000 f83e 	bl	80050ac <__malloc_lock>
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <_free_r+0x90>)
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	b933      	cbnz	r3, 8005044 <_free_r+0x2c>
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	4628      	mov	r0, r5
 800503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005040:	f000 b83a 	b.w	80050b8 <__malloc_unlock>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d908      	bls.n	800505a <_free_r+0x42>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	1821      	adds	r1, r4, r0
 800504c:	428b      	cmp	r3, r1
 800504e:	bf01      	itttt	eq
 8005050:	6819      	ldreq	r1, [r3, #0]
 8005052:	685b      	ldreq	r3, [r3, #4]
 8005054:	1809      	addeq	r1, r1, r0
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	e7ed      	b.n	8005036 <_free_r+0x1e>
 800505a:	461a      	mov	r2, r3
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b10b      	cbz	r3, 8005064 <_free_r+0x4c>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d9fa      	bls.n	800505a <_free_r+0x42>
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	1850      	adds	r0, r2, r1
 8005068:	42a0      	cmp	r0, r4
 800506a:	d10b      	bne.n	8005084 <_free_r+0x6c>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	4401      	add	r1, r0
 8005070:	1850      	adds	r0, r2, r1
 8005072:	4283      	cmp	r3, r0
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	d1e0      	bne.n	800503a <_free_r+0x22>
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	4408      	add	r0, r1
 8005080:	6010      	str	r0, [r2, #0]
 8005082:	e7da      	b.n	800503a <_free_r+0x22>
 8005084:	d902      	bls.n	800508c <_free_r+0x74>
 8005086:	230c      	movs	r3, #12
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	e7d6      	b.n	800503a <_free_r+0x22>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	1821      	adds	r1, r4, r0
 8005090:	428b      	cmp	r3, r1
 8005092:	bf04      	itt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	bf04      	itt	eq
 800509c:	1809      	addeq	r1, r1, r0
 800509e:	6021      	streq	r1, [r4, #0]
 80050a0:	6054      	str	r4, [r2, #4]
 80050a2:	e7ca      	b.n	800503a <_free_r+0x22>
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	20004254 	.word	0x20004254

080050ac <__malloc_lock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	@ (80050b4 <__malloc_lock+0x8>)
 80050ae:	f7ff bf45 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 80050b2:	bf00      	nop
 80050b4:	20004250 	.word	0x20004250

080050b8 <__malloc_unlock>:
 80050b8:	4801      	ldr	r0, [pc, #4]	@ (80050c0 <__malloc_unlock+0x8>)
 80050ba:	f7ff bf40 	b.w	8004f3e <__retarget_lock_release_recursive>
 80050be:	bf00      	nop
 80050c0:	20004250 	.word	0x20004250

080050c4 <_init>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	bf00      	nop
 80050c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ca:	bc08      	pop	{r3}
 80050cc:	469e      	mov	lr, r3
 80050ce:	4770      	bx	lr

080050d0 <_fini>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr
